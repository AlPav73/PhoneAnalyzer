#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PhoneAnalyzer.Classes
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PaDb")]
	public partial class PaDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWorker(Worker instance);
    partial void UpdateWorker(Worker instance);
    partial void DeleteWorker(Worker instance);
    partial void InsertNumber(Number instance);
    partial void UpdateNumber(Number instance);
    partial void DeleteNumber(Number instance);
    partial void InsertSubdivision(Subdivision instance);
    partial void UpdateSubdivision(Subdivision instance);
    partial void DeleteSubdivision(Subdivision instance);
    partial void InsertCall(Call instance);
    partial void UpdateCall(Call instance);
    partial void DeleteCall(Call instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertAtcCall(AtcCall instance);
    partial void UpdateAtcCall(AtcCall instance);
    partial void DeleteAtcCall(AtcCall instance);
    partial void InsertCloseSite(CloseSite instance);
    partial void UpdateCloseSite(CloseSite instance);
    partial void DeleteCloseSite(CloseSite instance);
    #endregion
		
		public PaDbDataContext() : 
				base(global::PhoneAnalyzer.Properties.Settings.Default.PaDbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PaDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PaDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PaDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PaDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Worker> Workers
		{
			get
			{
				return this.GetTable<Worker>();
			}
		}
		
		public System.Data.Linq.Table<Number> Numbers
		{
			get
			{
				return this.GetTable<Number>();
			}
		}
		
		public System.Data.Linq.Table<Subdivision> Subdivisions
		{
			get
			{
				return this.GetTable<Subdivision>();
			}
		}
		
		public System.Data.Linq.Table<Call> Calls
		{
			get
			{
				return this.GetTable<Call>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<AtcCall> AtcCalls
		{
			get
			{
				return this.GetTable<AtcCall>();
			}
		}
		
		public System.Data.Linq.Table<CloseSite> CloseSites
		{
			get
			{
				return this.GetTable<CloseSite>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Worker")]
	public partial class Worker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SubdivisionId;
		
		private string _Fio;
		
		private int _Salary;
		
		private EntitySet<Number> _Numbers;
		
		private EntityRef<Subdivision> _Subdivision;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubdivisionIdChanging(int value);
    partial void OnSubdivisionIdChanged();
    partial void OnFioChanging(string value);
    partial void OnFioChanged();
    partial void OnSalaryChanging(int value);
    partial void OnSalaryChanged();
    #endregion
		
		public Worker()
		{
			this._Numbers = new EntitySet<Number>(new Action<Number>(this.attach_Numbers), new Action<Number>(this.detach_Numbers));
			this._Subdivision = default(EntityRef<Subdivision>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubdivisionId", DbType="Int NOT NULL")]
		public int SubdivisionId
		{
			get
			{
				return this._SubdivisionId;
			}
			set
			{
				if ((this._SubdivisionId != value))
				{
					if (this._Subdivision.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubdivisionIdChanging(value);
					this.SendPropertyChanging();
					this._SubdivisionId = value;
					this.SendPropertyChanged("SubdivisionId");
					this.OnSubdivisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fio", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Fio
		{
			get
			{
				return this._Fio;
			}
			set
			{
				if ((this._Fio != value))
				{
					this.OnFioChanging(value);
					this.SendPropertyChanging();
					this._Fio = value;
					this.SendPropertyChanged("Fio");
					this.OnFioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Int NOT NULL")]
		public int Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_Number", Storage="_Numbers", ThisKey="Id", OtherKey="WorkerId")]
		public EntitySet<Number> Numbers
		{
			get
			{
				return this._Numbers;
			}
			set
			{
				this._Numbers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subdivision_Worker", Storage="_Subdivision", ThisKey="SubdivisionId", OtherKey="Id", IsForeignKey=true)]
		public Subdivision Subdivision
		{
			get
			{
				return this._Subdivision.Entity;
			}
			set
			{
				Subdivision previousValue = this._Subdivision.Entity;
				if (((previousValue != value) 
							|| (this._Subdivision.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subdivision.Entity = null;
						previousValue.Workers.Remove(this);
					}
					this._Subdivision.Entity = value;
					if ((value != null))
					{
						value.Workers.Add(this);
						this._SubdivisionId = value.Id;
					}
					else
					{
						this._SubdivisionId = default(int);
					}
					this.SendPropertyChanged("Subdivision");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Numbers(Number entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_Numbers(Number entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Number")]
	public partial class Number : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _WorkerId;
		
		private string _PhoneNumber;
		
		private int _Type;
		
		private EntitySet<Call> _Calls;
		
		private EntityRef<Worker> _Worker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWorkerIdChanging(int value);
    partial void OnWorkerIdChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public Number()
		{
			this._Calls = new EntitySet<Call>(new Action<Call>(this.attach_Calls), new Action<Call>(this.detach_Calls));
			this._Worker = default(EntityRef<Worker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkerId", DbType="Int NOT NULL")]
		public int WorkerId
		{
			get
			{
				return this._WorkerId;
			}
			set
			{
				if ((this._WorkerId != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkerIdChanging(value);
					this.SendPropertyChanging();
					this._WorkerId = value;
					this.SendPropertyChanged("WorkerId");
					this.OnWorkerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Number_Call", Storage="_Calls", ThisKey="Id", OtherKey="NumberId")]
		public EntitySet<Call> Calls
		{
			get
			{
				return this._Calls;
			}
			set
			{
				this._Calls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_Number", Storage="_Worker", ThisKey="WorkerId", OtherKey="Id", IsForeignKey=true)]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.Numbers.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.Numbers.Add(this);
						this._WorkerId = value.Id;
					}
					else
					{
						this._WorkerId = default(int);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Calls(Call entity)
		{
			this.SendPropertyChanging();
			entity.Number = this;
		}
		
		private void detach_Calls(Call entity)
		{
			this.SendPropertyChanging();
			entity.Number = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subdivision")]
	public partial class Subdivision : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _DirectorFio;
		
		private string _Email;
		
		private EntitySet<Worker> _Workers;
		
		private EntitySet<AtcCall> _AtcCalls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDirectorFioChanging(string value);
    partial void OnDirectorFioChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Subdivision()
		{
			this._Workers = new EntitySet<Worker>(new Action<Worker>(this.attach_Workers), new Action<Worker>(this.detach_Workers));
			this._AtcCalls = new EntitySet<AtcCall>(new Action<AtcCall>(this.attach_AtcCalls), new Action<AtcCall>(this.detach_AtcCalls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectorFio", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string DirectorFio
		{
			get
			{
				return this._DirectorFio;
			}
			set
			{
				if ((this._DirectorFio != value))
				{
					this.OnDirectorFioChanging(value);
					this.SendPropertyChanging();
					this._DirectorFio = value;
					this.SendPropertyChanged("DirectorFio");
					this.OnDirectorFioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subdivision_Worker", Storage="_Workers", ThisKey="Id", OtherKey="SubdivisionId")]
		public EntitySet<Worker> Workers
		{
			get
			{
				return this._Workers;
			}
			set
			{
				this._Workers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subdivision_AtcCall", Storage="_AtcCalls", ThisKey="Id", OtherKey="SubdivisionId")]
		public EntitySet<AtcCall> AtcCalls
		{
			get
			{
				return this._AtcCalls;
			}
			set
			{
				this._AtcCalls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Workers(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Subdivision = this;
		}
		
		private void detach_Workers(Worker entity)
		{
			this.SendPropertyChanging();
			entity.Subdivision = null;
		}
		
		private void attach_AtcCalls(AtcCall entity)
		{
			this.SendPropertyChanging();
			entity.Subdivision = this;
		}
		
		private void detach_AtcCalls(AtcCall entity)
		{
			this.SendPropertyChanging();
			entity.Subdivision = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Call")]
	public partial class Call : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _NumberId;
		
		private string _ToNumber;
		
		private System.DateTime _Date;
		
		private int _Duration;
		
		private decimal _Price;
		
		private EntityRef<Number> _Number;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNumberIdChanging(int value);
    partial void OnNumberIdChanged();
    partial void OnToNumberChanging(string value);
    partial void OnToNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnDurationChanging(int value);
    partial void OnDurationChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public Call()
		{
			this._Number = default(EntityRef<Number>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberId", DbType="Int NOT NULL")]
		public int NumberId
		{
			get
			{
				return this._NumberId;
			}
			set
			{
				if ((this._NumberId != value))
				{
					if (this._Number.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNumberIdChanging(value);
					this.SendPropertyChanging();
					this._NumberId = value;
					this.SendPropertyChanged("NumberId");
					this.OnNumberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToNumber", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ToNumber
		{
			get
			{
				return this._ToNumber;
			}
			set
			{
				if ((this._ToNumber != value))
				{
					this.OnToNumberChanging(value);
					this.SendPropertyChanging();
					this._ToNumber = value;
					this.SendPropertyChanged("ToNumber");
					this.OnToNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int NOT NULL")]
		public int Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,0) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Number_Call", Storage="_Number", ThisKey="NumberId", OtherKey="Id", IsForeignKey=true)]
		public Number Number
		{
			get
			{
				return this._Number.Entity;
			}
			set
			{
				Number previousValue = this._Number.Entity;
				if (((previousValue != value) 
							|| (this._Number.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Number.Entity = null;
						previousValue.Calls.Remove(this);
					}
					this._Number.Entity = value;
					if ((value != null))
					{
						value.Calls.Add(this);
						this._NumberId = value.Id;
					}
					else
					{
						this._NumberId = default(int);
					}
					this.SendPropertyChanged("Number");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Settings")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AtcCall")]
	public partial class AtcCall : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SubdivisionId;
		
		private string _ToNumber;
		
		private System.DateTime _Date;
		
		private int _Duration;
		
		private EntityRef<Subdivision> _Subdivision;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubdivisionIdChanging(int value);
    partial void OnSubdivisionIdChanged();
    partial void OnToNumberChanging(string value);
    partial void OnToNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnDurationChanging(int value);
    partial void OnDurationChanged();
    #endregion
		
		public AtcCall()
		{
			this._Subdivision = default(EntityRef<Subdivision>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubdivisionId", DbType="Int NOT NULL")]
		public int SubdivisionId
		{
			get
			{
				return this._SubdivisionId;
			}
			set
			{
				if ((this._SubdivisionId != value))
				{
					if (this._Subdivision.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubdivisionIdChanging(value);
					this.SendPropertyChanging();
					this._SubdivisionId = value;
					this.SendPropertyChanged("SubdivisionId");
					this.OnSubdivisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToNumber", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ToNumber
		{
			get
			{
				return this._ToNumber;
			}
			set
			{
				if ((this._ToNumber != value))
				{
					this.OnToNumberChanging(value);
					this.SendPropertyChanging();
					this._ToNumber = value;
					this.SendPropertyChanged("ToNumber");
					this.OnToNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int NOT NULL")]
		public int Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subdivision_AtcCall", Storage="_Subdivision", ThisKey="SubdivisionId", OtherKey="Id", IsForeignKey=true)]
		public Subdivision Subdivision
		{
			get
			{
				return this._Subdivision.Entity;
			}
			set
			{
				Subdivision previousValue = this._Subdivision.Entity;
				if (((previousValue != value) 
							|| (this._Subdivision.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subdivision.Entity = null;
						previousValue.AtcCalls.Remove(this);
					}
					this._Subdivision.Entity = value;
					if ((value != null))
					{
						value.AtcCalls.Add(this);
						this._SubdivisionId = value.Id;
					}
					else
					{
						this._SubdivisionId = default(int);
					}
					this.SendPropertyChanged("Subdivision");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CloseSite")]
	public partial class CloseSite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Url;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public CloseSite()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
